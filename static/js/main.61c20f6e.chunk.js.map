{"version":3,"sources":["materialStyles/icons.js","components/Navbar/navbar.js","redux/actions/chartActions.js","components/ChartRoundTabs/chartRoundTabs.js","materialStyles/table.js","components/CompanyRoundInfo/companyRoundInfo.js","components/ChartRow/chartRow.js","components/ChartMain/chartMain.js","utility/calculation.js","components/ChartContainer/chartContainer.js","components/SideManu/sideManu.js","utility/modifyCsvStructure.js","components/CSVreader/csvReader.js","redux/actions/csvActions.js","App.js","redux/reducers/csvReducer.js","redux/reducers/chartReducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["useStyles","makeStyles","iconButton","width","height","chevronIcon","left","top","transform","openSideManu","addCSVIcon","Navbar","setOpenManu","classes","className","IconButton","onClick","loadGroupChart","groupChartData","type","payload","ChartRoundTabs","roundGroup","roundGroupData","Object","values","dispatch","useDispatch","Button","variant","size","id","tableContainer","button","minWidth","fontSize","marginTop","tableRow","tableCell","tooltip","CompanyRoundInfo","roundInfo","CEOscore","useState","isMultiLeads","setIsMultiLeads","multiLeadsPreview","setMultiLeadsPreview","isMultiInvestors","setIsMultiInvestor","multiInvestorsPreview","setMultiInvestorPreview","useEffect","leadInvestors","leadInvestor","investors","checkMultiInvestors","TVR","Math","round","leadsArray","split","investorsArray","length","slice","join","placement","title","Typography","investment","date","color","TSLI","multiplier","IGR","finance","leadScore","previousLeadScore","ChartRow","companyData","open","setOpen","rounds","checkMultiLeadInvestors","TableRow","sx","borderBottom","TableCell","align","name","established","numberOfRounds","totalRaised","Tooltip","CEO","score","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","display","flexWrap","map","roundNumber","ChartMain","chartData","page","setPage","rowsPerPage","setRowsPerPage","caculatedGroupData","setCaculatedGroupData","groupData","company","console","log","forEach","IGRscore","IGRrawScore","refundingTimingFactor","IGRcaculation","rankValue","lead","AAA","AA","A","B","previousLead","caculateLeadsScore","TSLIsum","i","avgTSLIforRound","TVRscore","caculateTVR","financeTotal","caculateFinance","lastRound","finalScore","caculateFinalScore","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableBody","sort","a","b","TablePagination","rowsPerPageOptions","component","count","onPageChange","event","newPage","onRowsPerPageChange","target","value","ChartContainer","csvData","useSelector","state","csvDataByGroups","Paper","overflow","error","SideManu","openManu","arrangedRoundsByDates","companyObject","roundsOrderedByDate","dateArray","newDateFormat","Date","simpleDate","toLocaleDateString","caculateTSLI","currentRoundDateArray","previousRoundDateArray","months","Number","caculateRoundMultiple","modifyCsvStructure","arrangedCSVdata","round_one_group","round_two_group","round_three_group","round_four_group","round_five_group","round_six_group","round_seven_group","round_eight_group","more_than_eight_rounds","createNewCompanyObject","companyDataObject","currentRound","nextRound","data","description","subSector","employees","companyValuation","push","orderedCompanyDataObject","buttonRef","React","createRef","CSVreader","isOpen","handleOpenDialog","e","current","ref","onFileLoad","storeCSVdata","onError","err","noClick","progressBarColor","file","Fab","App","initialState","csvReducer","actions","chartReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61c20f6e.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    iconButton: {\n        width: \"40px\",\n        height: \"40px\"\n    },\n    chevronIcon: {\n        width: \"35px\",\n        left: '95%',\n        top: \"15px\",\n        transform: \"translateX(-100%)\"\n    },\n    openSideManu: {\n        width: \"40px\"\n    },\n    addCSVIcon: {\n        transform: 'scale(1.7)',\n    }\n})\n\n\n\n","import React from 'react';\nimport \"./navbar.css\";\nimport { useStyles } from '../../materialStyles/icons';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport IconButton from '@mui/material/IconButton';\n\n\nfunction Navbar({ setOpenManu }) {\n\n    const classes = useStyles();\n    return (\n        <div>\n            <div className=\"navBar\">\n                <IconButton className={classes.iconButton} onClick={() => setOpenManu(true)} >\n                    <MenuIcon className={classes.openSideManu} />\n                </IconButton>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Navbar\n","const loadGroupChart = (groupChartData) => {\n    return {\n        type: 'LOAD_GROUP_CHART',\n        payload: groupChartData\n    }\n}\n\nexport default loadGroupChart;","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport loadGroupChart from '../../redux/actions/chartActions';\nimport Button from '@mui/material/Button';\n\nfunction ChartRoundTabs({ roundGroup }) {\n\n    const roundGroupData = Object.values(roundGroup)[0];\n    const dispatch = useDispatch();\n\n    const handleGroupChart = () => {\n        dispatch(loadGroupChart(roundGroupData))\n    }\n\n    return (\n        <div>\n            <Button variant=\"outlined\" size=\"large\" onClick={() => handleGroupChart()}>\n                {roundGroup.id}\n            </Button>\n        </div>\n    )\n}\n\nexport default ChartRoundTabs\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    tableContainer: {\n    },\n    button: {\n        minWidth: \"80px\",\n        height: \"25px\",\n        fontSize: \"10px\",\n        marginTop: \"2px\"\n    },\n    tableRow: {\n    },\n    tableCell: {\n    },\n    tooltip: {\n        fontSize: \"13px!important\"\n    }\n})\n","import React, { useState, useEffect } from 'react';\nimport \"./companyRoundInfo.css\";\nimport { useStyles } from '../../materialStyles/table';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport DateRangeIcon from '@mui/icons-material/DateRange';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport GroupIcon from '@mui/icons-material/Group';\nimport { Button, Tooltip } from '@material-ui/core';\nimport Typography from '@mui/material/Typography';\n\n\nfunction CompanyRoundInfo({ roundInfo, CEOscore }) {\n\n    const classes = useStyles();\n\n    const [isMultiLeads, setIsMultiLeads] = useState(false)\n    const [multiLeadsPreview, setMultiLeadsPreview] = useState(\"\")\n    const [isMultiInvestors, setIsMultiInvestor] = useState(false)\n    const [multiInvestorsPreview, setMultiInvestorPreview] = useState(\"\")\n\n    useEffect(() => {\n        const leadInvestors = roundInfo.leadInvestor\n        const investors = roundInfo.investors\n        checkMultiInvestors(leadInvestors, investors)\n        roundInfo.TVR = Math.round(roundInfo.TVR * 100) / 100\n    }, [roundInfo])\n\n    const checkMultiInvestors = (leadInvestors, investors) => {\n        let leadsArray = leadInvestors.split(\",\")\n        let investorsArray = investors.split(\",\")\n        if (leadsArray.length > 1) {\n            setIsMultiLeads(leadInvestors)\n            setMultiLeadsPreview(leadsArray.slice(0, 1).join(\"\"))\n        } else {\n            setIsMultiLeads(false)\n        }\n        if (investorsArray.length > 1) {\n            setIsMultiInvestor(investors)\n            setMultiInvestorPreview(investorsArray[0])\n        } else {\n            setIsMultiInvestor(false)\n        }\n    }\n\n    return (\n        <>\n\n            <div className=\"companyRoundInfo-container\">\n                <div className=\"rawData\">\n                    <Tooltip\n                        placement=\"right-start\"\n                        title={\n                            <>\n                                <Typography className={classes.tooltip} >Round Investment</Typography>\n                            </>\n                        }\n                    >\n                        <div className=\"inline\"><AttachMoneyIcon /><div>{`${roundInfo.investment} (m)`}</div></div>\n                    </Tooltip>\n                    <Tooltip\n                        placement=\"right-start\"\n                        title={\n                            <>\n                                <Typography className={classes.tooltip} >Round Date</Typography>\n                            </>\n                        }\n                    >\n                        <div className=\"inline\"><DateRangeIcon /><div>{roundInfo.date}</div></div>\n                    </Tooltip>\n                    <Tooltip\n                        placement=\"right-start\"\n                        title={\n                            <>\n                                <Typography className={classes.tooltip} >Lead Investor/s</Typography>\n                            </>\n                        }\n                    >\n\n                        <div className=\"inline\"><AccountCircleIcon />\n                            <div>\n                                {isMultiLeads ?\n\n                                    <div>\n                                        {multiLeadsPreview}\n                                        <Tooltip title={isMultiLeads}>\n                                            <Button variant=\"contained\" size=\"small\" color=\"primary\"  >\n                                                see more...\n                                    </Button>\n                                        </Tooltip>\n                                    </div>\n                                    :\n                                    <div >\n                                        {roundInfo.leadInvestor}\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                    </Tooltip>\n                    <Tooltip\n                        placement=\"right-start\"\n                        title={\n                            <>\n                                <Typography className={classes.tooltip} >Investor/s</Typography>\n                            </>\n                        }\n                    >\n                        <div className=\"inline\" ><GroupIcon />\n                            <div>\n                                {isMultiInvestors ?\n                                    <div>\n                                        <div>{multiInvestorsPreview}</div>\n                                        <Tooltip title={isMultiInvestors}>\n                                            <Button variant=\"contained\" size=\"small\" color=\"primary\"  >\n                                                see more...\n                                    </Button>\n                                        </Tooltip>\n                                    </div>\n                                    :\n                                    <div >\n                                        {roundInfo.investors}\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                    </Tooltip>\n                    <Tooltip\n                        placement=\"right-start\"\n                        title={\n                            <>\n                                <Typography className={classes.tooltip} >TSLI - Time Since Last Round ({`${roundInfo.TSLI}`})</Typography>\n                            </>\n                        }\n                    >\n                        <div>{`TSLI: ${roundInfo.TSLI}`}</div>\n                    </Tooltip>\n                </div>\n                <div className=\"scoreData\">\n                    <Tooltip\n                        placement=\"right-start\"\n                        title={\n                            <>\n                                <Typography className={classes.tooltip} >IGR - Investment Growth Relevance (25%)</Typography>\n                                <Typography className={classes.tooltip} >IGR investment quality calc - Multiplier ({`${roundInfo.multiplier}`}) / TSLI ({`${roundInfo.TSLI}`})</Typography>\n                                <Typography className={classes.tooltip}>IGR Formula - 'investment quality calc'  * monthly factor</Typography>\n                                <Typography className={classes.tooltip}>'Multiplier' - investment ratio between two rounds</Typography>\n                                <Typography className={classes.tooltip}>'Monthly factor' - value between 1-3 based on TSLI</Typography>\n                                <Typography className={classes.tooltip}>*Finale IGR score can be up to 15 points if 'investment quality calc' result is below '0.5'</Typography>\n                                <Typography className={classes.tooltip}>*Finlae IGR score can be up to 25 points if 'investment quality calc' result is above '0.5'</Typography>\n                            </>\n                        }\n                    >\n                        <div>{`IGR Score: ${roundInfo.IGR}`}</div>\n                    </Tooltip>\n                    <Tooltip\n                        placement=\"right-start\"\n                        title={\n                            <>\n                                <Typography className={classes.tooltip} >TVR - Time Versus Rounds (10%)</Typography>\n                                <Typography className={classes.tooltip}>Formula - Avg TSLI ( TSLI / (number or rounds-1)</Typography>\n                                <Typography className={classes.tooltip}>Finale TVR score will be between 1-10 depends of TSLI in 6-24 months </Typography>\n                                <Typography className={classes.tooltip}>*6 months or below will credit 10 points</Typography>\n                                <Typography className={classes.tooltip}>*24 months or above will credit 1 point</Typography>\n                            </>\n                        }\n                    >\n                        <div>{`TVR Score: ${roundInfo.TVR}`}</div>\n                    </Tooltip>\n                    <Tooltip\n                        placement=\"right-start\"\n                        title={\n                            <>\n                                <Typography className={classes.tooltip} >Finance - Total raised investment (5%)</Typography>\n                                <Typography className={classes.tooltip}>5 points will be credited upon company funding sum reach above fixed threshold </Typography>\n                                <Typography className={classes.tooltip}> 2 rounds group threshold - 15m </Typography>\n                                <Typography className={classes.tooltip}> 3 rounds group threshold - 35m </Typography>\n                                <Typography className={classes.tooltip}> 4 rounds group threshold - 70m </Typography>\n                                <Typography className={classes.tooltip}> 5 rounds group threshold - 110m </Typography>\n                                <Typography className={classes.tooltip}> 6 rounds group threshold - 170m </Typography>\n                                <Typography className={classes.tooltip}> 7+ rounds group threshold - 250m </Typography>\n                            </>\n                        }\n                    >\n                        <div>{`Finance Score: ${roundInfo.finance}`}</div>\n                    </Tooltip>\n                    <div>{`CEO score: ${CEOscore}`}</div>\n                    <div>{`Lead Score ${roundInfo.leadScore}`}</div>\n                    <div>{`Previous Lead Score ${roundInfo.previousLeadScore}`}</div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default CompanyRoundInfo\n","import React, { useState, useEffect } from 'react';\nimport './chartRow.css';\nimport { useStyles } from '../../materialStyles/table';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport IconButton from '@mui/material/IconButton';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport Collapse from '@mui/material/Collapse';\nimport { Button } from '@material-ui/core';\nimport Tooltip from '@mui/material/Tooltip';\nimport CompanyRoundInfo from '../CompanyRoundInfo/companyRoundInfo';\n\n\nfunction ChartRow({ companyData }) {\n\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [isMultiLeads, setIsMultiLeads] = useState(false)\n    const [multiLeadsPreview, setMultiLeadsPreview] = useState(\"\")\n\n    useEffect(() => {\n        const leadInvestors = companyData.rounds[companyData.rounds.length - 1].leadInvestor;\n        checkMultiLeadInvestors(leadInvestors);\n    }, [companyData])\n\n    const checkMultiLeadInvestors = (leadInvestors) => {\n        let leadsArray = leadInvestors.split(\",\")\n        if (leadsArray.length > 2) {\n            setIsMultiLeads(leadInvestors)\n            setMultiLeadsPreview(leadsArray.slice(0, 2).join(\", \"))\n        } else {\n            setIsMultiLeads(false)\n        }\n    }\n\n    return (\n        <>\n            <TableRow className={classes.tableRow} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell align=\"left\">\n                    {companyData.name}\n                </TableCell>\n                <TableCell align=\"left\">{companyData.established}</TableCell>\n                <TableCell align=\"left\">{companyData.numberOfRounds}</TableCell>\n                <TableCell align=\"left\">{companyData.totalRaised}</TableCell>\n                {isMultiLeads ?\n                    <TableCell className={classes.tableCell} align=\"left\">\n                        {multiLeadsPreview}\n                        <Tooltip title={isMultiLeads}>\n                            <Button variant=\"contained\" className={classes.button} color=\"primary\"  >see more...</Button>\n                        </Tooltip>\n                    </TableCell>\n                    :\n                    <TableCell align=\"left\">\n                        {companyData.rounds[companyData.rounds.length - 1].leadInvestor}\n                    </TableCell>\n                }\n                <TableCell align=\"left\">{companyData.CEO}</TableCell>\n                <TableCell align=\"center\">{companyData.score}</TableCell>\n            </TableRow>\n            <TableRow >\n                <>\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                        <Collapse in={open} timeout=\"auto\" unmountOnExit >\n                            <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                                {companyData.rounds.map(round => (\n                                    <div key={round.roundNumber}>\n                                        <CompanyRoundInfo roundInfo={round} CEOscore={companyData.CEOscore} />\n                                    </div>\n                                ))}\n                            </div>\n                        </Collapse>\n                    </TableCell>\n\n                </>\n            </TableRow>\n        </>\n    )\n}\n\nexport default ChartRow;\n","import React, { useState, useEffect } from 'react';\nimport './chartMain.css';\nimport { useStyles } from '../../materialStyles/table';\nimport Table from '@mui/material/Table';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TableBody from '@mui/material/TableBody';\nimport TablePagination from '@mui/material/TablePagination';\nimport ChartRow from '../ChartRow/chartRow';\nimport TableContainer from '@mui/material/TableContainer';\nimport { IGRcaculation, caculateTVR, caculateFinance, caculateLeadsScore, caculateCEOScore, caculateFinalScore } from '../../utility/calculation';\n\nfunction ChartMain({ chartData }) {\n\n    const classes = useStyles();\n\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [caculatedGroupData, setCaculatedGroupData] = useState('')\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    useEffect(() => {\n        const groupData = chartData.map(company => {\n            if (company.name == 'Sorbet') console.log('aaaaaaaa', company, \"aaaaaaaaa\")\n            company.rounds.forEach(round => {\n                round.IGR = IGRcaculation(round);\n                caculateLeadsScore(round)\n\n            })\n            caculateTVR(company);\n            caculateFinance(company);\n            caculateCEOScore(company);\n            caculateFinalScore(company);\n            return company\n        })\n        setCaculatedGroupData(groupData)\n    }, [chartData])\n\n\n    return (\n        <>\n            <TableContainer sx={{ maxHeight: 440 }}>\n                <Table stickyHeader aria-label=\"collapsible table\" className={classes.tableContainer}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell />\n                            <TableCell align=\"left\">Name</TableCell>\n                            <TableCell align=\"left\">Established</TableCell>\n                            <TableCell align=\"left\">Round</TableCell>\n                            <TableCell align=\"left\">TotalRaised</TableCell>\n                            <TableCell align=\"left\">Lead</TableCell>\n                            <TableCell align=\"left\">CEO</TableCell>\n                            <TableCell align=\"center\">Score</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {caculatedGroupData\n                            && caculatedGroupData\n                                .sort((a, b) => b.score - a.score)\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((company) => (\n                                    <ChartRow key={company.name} companyData={company} />))\n                        }\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component=\"div\"\n                count={chartData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </>\n    )\n}\n\nexport default ChartMain;\n","export const IGRcaculation = (round) => {\n    const { TSLI, multiplier } = round\n    let IGRscore = \"N/A\"\n    if (TSLI && multiplier) {\n        let IGRrawScore = multiplier / TSLI;\n\n        let refundingTimingFactor = 3;\n        if (TSLI <= 5) console.log(\"↓↓↓ Need Checking IGR ↓↓↓\")\n\n        else if (TSLI <= 12) {\n            //reducing 0.085 factor value for every TSLI-month above 5. if TSLI = 8 then reducing 0.255(0.085 x 3) from the base factor of 3 => 2.745\n            refundingTimingFactor -= ((TSLI - 5) * 0.085);\n        }\n        else if (TSLI <= 24) {\n            //above 1 year start with 0.6 less factor value\n            refundingTimingFactor -= 0.6;\n            //reducing 0.11 factor value for every TSLI-month above 12. if TSLI = 14 then reducing 0.220(0.11 x 2) from the base factor of 2.4 => 2.180\n            refundingTimingFactor -= ((TSLI - 12) * 0.11);\n        }\n        else refundingTimingFactor = 1;\n\n        IGRscore = IGRrawScore * refundingTimingFactor;\n        IGRscore = Math.round(IGRscore * 100) / 100;\n    }\n\n    const IGRvalueCac = (IGR) => {\n        //Here we detremine the value of IGR score and shift it to score between 0-25points (25% from final score)\n        if (IGR < 0.04) IGR = 1;\n        else if (IGR >= 0.04 && IGR <= 0.5) {\n            // 15 points passible divided to 46 (0.46 points of value )\n            let measureValue = 15 / 46\n            IGR = (IGR - 0.04) * 100 * measureValue\n        }\n        else if (IGR > 0.5) {\n            // Another 10 points - 1 points for each 0.1 above 0.5\n            if (IGR > 1.5) IGR = 25;\n            else IGR = ((IGR - 0.5) * 10) + 15;\n        }\n        return IGR;\n    }\n\n    IGRscore = IGRvalueCac(IGRscore)\n    IGRscore = Math.round(IGRscore * 100) / 100\n\n    return IGRscore\n}\n\nexport const caculateTVR = (companyData) => {\n    //TSLI - Time since last investment\n    let TSLIsum = 0\n    for (let i = 1; i < companyData.rounds.length; i++) {\n        TSLIsum += companyData.rounds[i].TSLI;\n        let avgTSLIforRound = TSLIsum / i\n        if (avgTSLIforRound < 7) companyData.rounds[i].TVR = 10;\n        else if (avgTSLIforRound > 23) companyData.rounds[i].TVR = 0;\n        // caculate each round avg TSLI(6-24) and return points between 0-10\n        else {\n            const TVRscore = 10 - ((avgTSLIforRound - 6) * 0.555)\n            companyData.rounds[i].TVR = Math.round(TVRscore * 100) / 100\n        }\n    }\n}\n\nexport const caculateFinance = (companyData) => {\n    let financeTotal = 0\n    if (companyData.rounds[0]) financeTotal = +companyData.rounds[0].investment;\n    for (let i = 1; i < companyData.rounds.length; i++) {\n        financeTotal += +companyData.rounds[i].investment;\n        switch (companyData.rounds[i].roundNumber) {\n            case 2:\n                if (financeTotal > 15) companyData.rounds[i].finance = 5;\n                break;\n            case 3:\n                if (financeTotal > 35) companyData.rounds[i].finance = 5;\n                break;\n            case 4:\n                if (financeTotal > 70) companyData.rounds[i].finance = 5;\n                break;\n            case 5:\n                if (financeTotal > 110) companyData.rounds[i].finance = 5;\n                break;\n            case 6:\n                if (financeTotal > 170) companyData.rounds[i].finance = 5;\n                break;\n            case 7:\n                if (financeTotal > 250) companyData.rounds[i].finance = 5;\n                break;\n            default:\n                companyData.rounds[i].finance = 0;\n                break;\n        }\n    }\n}\n\nexport const caculateCEOScore = (companyData) => {\n    const rankValue = {\n        CEO: {\n            AAA: 21.84,\n            AA: 16.38,\n            A: 10.92,\n            B: 5.46\n        },\n    }\n    companyData.CEOscore ?\n        companyData.CEOscore = rankValue.CEO[companyData.CEOscore]\n        :\n        companyData.CEOscore = 0;\n}\n\nexport const caculateLeadsScore = (round) => {\n\n    const rankValue = {\n        lead: {\n            AAA: 21.84,\n            AA: 16.38,\n            A: 10.92,\n            B: 5.46\n        },\n        previousLead: {\n            AAA: 16.32,\n            AA: 12.24,\n            A: 8.16,\n            B: 4.08\n        }\n    }\n    round.leadScore ?\n        round.leadScore = rankValue.lead[round.leadScore]\n        :\n        round.leadScore = 0;\n    round.previousLeadScore ?\n        round.previousLeadScore = rankValue.previousLead[round.previousLeadScore]\n        :\n        round.previousLeadScore = 0;\n}\n\nexport const caculateFinalScore = (companyData) => {\n    const lastRound = companyData.rounds[companyData.rounds.length - 1];\n    const finalIGR = lastRound.IGR ? lastRound.IGR : 0;\n    const finalTVR = lastRound.TVR ? lastRound.TVR : 0;\n    const finalFinance = lastRound.finance ? lastRound.finance : 0\n    const { CEOscore } = companyData;\n    const { leadScore } = lastRound;\n    const { previousLeadScore } = lastRound;\n    const score = finalIGR + finalTVR + finalFinance + CEOscore + leadScore + previousLeadScore;\n    const finalScore = Math.round(score * 100) / 100\n    companyData.score = finalScore;\n}","import React from 'react';\nimport './chartContainer.css';\nimport { useSelector } from 'react-redux';\nimport RoundGroupTabs from '../ChartRoundTabs/chartRoundTabs';\nimport ChartMain from '../ChartMain/chartMain';\nimport Paper from '@mui/material/Paper';\n\n\nfunction ChartContainer() {\n\n    const csvData = useSelector(state => state.csvData)\n    const csvDataByGroups = csvData.csvData;\n    const chartData = useSelector(state => state.chartData)\n\n    return (\n        <div className=\"chartContainer\">\n            <div className=\"chartContainer-leftMargin\">\n            </div>\n            <Paper sx={{ width: '100%', overflow: 'hidden' }}>\n                {!csvData.error &&\n                    <>\n                        <div className=\"chartContainer-tabs\">\n                            {csvDataByGroups.map((roundGroup) => (\n                                <RoundGroupTabs key={roundGroup.id} roundGroup={roundGroup} />\n                            ))}\n                        </div>\n                        <div>\n                            <ChartMain chartData={chartData.roundGroupData} />\n                        </div>\n                    </>\n                }\n            </Paper>\n            <div className=\"chartContainer-rightMargin\">\n            </div>\n        </div>\n    )\n}\n\nexport default ChartContainer;\n","import React from 'react';\nimport './sideManu.css';\nimport { useStyles } from '../../materialStyles/icons';\nimport IconButton from '@mui/material/IconButton';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\n\nfunction SideManu({ openManu, setOpenManu }) {\n\n    const classes = useStyles();\n    return (\n        <div>\n            <div className=\"sideManu-container\">\n                {openManu &&\n                    <IconButton onClick={() => setOpenManu(false)} size=\"small\" className={classes.chevronIcon} >\n                        <ChevronLeftIcon />\n                    </IconButton>\n                }\n            </div>\n\n        </div>\n    )\n}\n\nexport default SideManu\n","\nfunction modifyCsvStructure(csvData) {\n    let arrangedCSVdata = [\n        { round_one_group: [], id: \"1\" },\n        { round_two_group: [], id: \"2\" },\n        { round_three_group: [], id: \"3\" },\n        { round_four_group: [], id: \"4\" },\n        { round_five_group: [], id: \"5\" },\n        { round_six_group: [], id: \"6\" },\n        { round_seven_group: [], id: \"7\" },\n        { round_eight_group: [], id: \"8\" },\n        { more_than_eight_rounds: [], id: \"+\" }\n    ]\n    let createNewCompanyObject = true\n    let companyDataObject = {}\n    for (let i = 1; i < csvData.length - 1; i++) {\n        let currentRound = csvData[i]\n        let nextRound = csvData[i + 1]\n        if (createNewCompanyObject) {\n            //creating new data object for company.\n            companyDataObject.name = currentRound.data[0];\n            companyDataObject.established = currentRound.data[6];\n            companyDataObject.numberOfRounds = 1;\n            companyDataObject.totalRaised = currentRound.data[7];\n            companyDataObject.CEO = currentRound.data[15];\n            companyDataObject.description = currentRound.data[2];\n            companyDataObject.subSector = currentRound.data[3];\n            companyDataObject.employees = currentRound.data[5];\n            companyDataObject.rounds = [{\n                roundNumber: \"\",\n                investment: currentRound.data[12],\n                date: currentRound.data[9],\n                leadInvestor: currentRound.data[14],\n                investors: currentRound.data[13],\n                leadScore: currentRound.data[17],\n                previousLeadScore: 0,\n            }];\n            companyDataObject.companyValuation = \"\";\n            companyDataObject.CEOscore = currentRound.data[16];\n            companyDataObject.score = \"\"\n        }\n        if (nextRound && currentRound.data[0] === nextRound.data[0]) {\n            companyDataObject.numberOfRounds += 1;\n            companyDataObject.rounds.push({\n                roundNumber: \"\",\n                investment: nextRound.data[12],\n                date: nextRound.data[9],\n                leadInvestor: nextRound.data[14],\n                investors: nextRound.data[13],\n                leadScore: nextRound.data[17],\n                previousLeadScore: currentRound.data[17], // Taking the lead score from previous round\n                TSLI: \"\",\n                IGR: \"Need to be caculated\",\n                finance: 0,\n            })\n            createNewCompanyObject = false\n        } else {\n            let orderedCompanyDataObject = arrangedRoundsByDates(companyDataObject);\n            caculateTSLI(orderedCompanyDataObject.rounds);\n            caculateRoundMultiple(orderedCompanyDataObject.rounds)\n\n            switch (orderedCompanyDataObject.numberOfRounds) {\n                case 1:\n                    arrangedCSVdata[0].round_one_group.push(orderedCompanyDataObject);\n                    break;\n                case 2:\n                    arrangedCSVdata[1].round_two_group.push(orderedCompanyDataObject);\n                    break;\n                case 3:\n                    arrangedCSVdata[2].round_three_group.push(orderedCompanyDataObject);\n                    break;\n                case 4:\n                    arrangedCSVdata[3].round_four_group.push(orderedCompanyDataObject);\n                    break;\n                case 5:\n                    arrangedCSVdata[4].round_five_group.push(orderedCompanyDataObject);\n                    break;\n                case 6:\n                    arrangedCSVdata[5].round_six_group.push(orderedCompanyDataObject);\n                    break;\n                case 7:\n                    arrangedCSVdata[6].round_seven_group.push(orderedCompanyDataObject);\n                    break;\n                case 8:\n                    arrangedCSVdata[7].round_eight_group.push(orderedCompanyDataObject);\n                    break;\n                default:\n                    arrangedCSVdata[8].more_than_eight_rounds.push(orderedCompanyDataObject)\n            }\n            companyDataObject = {}\n            createNewCompanyObject = true\n        }\n    }\n    return arrangedCSVdata;\n}\n\nconst arrangedRoundsByDates = companyObject => {\n    let rounds = companyObject.rounds;\n    let roundsNewFormat = rounds.map(round => {\n        const dateArray = round.date.split(\"/\");\n        const newDateFormat = new Date(dateArray[2], dateArray[1], dateArray[0])\n        round.date = newDateFormat\n        return round;\n    })\n    let roundsOrderedByDate = roundsNewFormat.sort((a, b) => a.date - b.date);\n\n    companyObject.rounds = roundsOrderedByDate;\n\n    for (let i = 0; i < companyObject.rounds.length; i++) {\n        let simpleDate = companyObject.rounds[i].date.toLocaleDateString('en-GB')\n        companyObject.rounds[i].date = simpleDate;\n        companyObject.rounds[i].roundNumber = i + 1\n    }\n    return companyObject;\n}\n\nconst caculateTSLI = (rounds) => {\n    for (let i = 1; i < rounds.length; i++) {\n        let currentRoundDateArray = rounds[i].date.split(\"/\");\n        let previousRoundDateArray = rounds[i - 1].date.split(\"/\");\n        let months = (currentRoundDateArray[2] - previousRoundDateArray[2]) * 12;\n        months -= Number(previousRoundDateArray[1]);\n        months += Number(currentRoundDateArray[1])\n        rounds[i].TSLI = months;\n    }\n}\n\nconst caculateRoundMultiple = (rounds) => {\n    for (let i = 1; i < rounds.length; i++) {\n        let currentRoundInvestment = rounds[i].investment\n        let previousRoundInvestment = rounds[i - 1].investment\n        let multiplier = (currentRoundInvestment / previousRoundInvestment)\n        rounds[i].multiplier = Math.round(multiplier * 100) / 100;\n    }\n}\n\n\nexport default modifyCsvStructure;\n","import React from 'react';\nimport './csvReader.css';\nimport { useDispatch } from 'react-redux';\nimport { storeCSVdata } from '../../redux/actions/csvActions';\nimport { csvDataFailure } from '../../redux/actions/csvActions';\nimport { CSVReader } from 'react-papaparse';\nimport { useStyles } from '../../materialStyles/icons';\nimport Fab from '@mui/material/Fab';\nimport AddIcon from '@mui/icons-material/Add';\nimport Tooltip from '@mui/material/Tooltip';\n\nconst buttonRef = React.createRef()\n\nfunction CSVreader({ isOpen }) {\n\n    const classes = useStyles();\n    const dispatch = useDispatch()\n\n\n    const handleOpenDialog = (e) => {\n        if (buttonRef.current) {\n            buttonRef.current.open(e)\n        }\n    }\n\n    const handleOnFileLoad = (data) => {\n        dispatch(storeCSVdata(data));\n    }\n\n    const handleOnError = (err) => {\n        console.log(err)\n        dispatch(csvDataFailure(err))\n    }\n\n    return (\n        <div className={isOpen ? \"addCSVbutton-container isOpen\" : \"addCSVbutton-container isClosed\"}>\n            <CSVReader\n                ref={buttonRef}\n                onFileLoad={handleOnFileLoad}\n                onError={handleOnError}\n                noClick\n                progressBarColor='red'\n            >\n                {({ file }) => (\n                    <div>\n                        <Tooltip title=\"Upload a CSV file\">\n                            <Fab type='button' color=\"primary\" className={classes.addCSVIcon} aria-label=\"add\" onClick={handleOpenDialog}>\n                                <AddIcon />\n                            </Fab>\n                        </Tooltip>\n                    </div>\n                )}\n            </CSVReader>\n        </div >\n    )\n}\n\nexport default CSVreader\n","import modifyCsvStructure from '../../utility/modifyCsvStructure';\n\nexport const storeCSVdata = (data) => {\n    let modifiedDataStructure = modifyCsvStructure(data)\n    return {\n        type: 'STORE_CSV_DATA',\n        payload: modifiedDataStructure\n    }\n}\n\nexport const csvDataFailure = (error) => {\n    return {\n        type: 'CSV_DATA_FAILURE',\n        error\n    }\n}","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/navbar';\nimport ChartContainer from './components/ChartContainer/chartContainer';\nimport SideManu from './components/SideManu/sideManu';\nimport CSVreader from './components/CSVreader/csvReader';\n\n\nfunction App() {\n\n  const [openManu, setOpenManu] = useState(false);\n\n  return (\n    <div className=\"app-container\">\n      <div className={openManu ? \"app-sideManu-open\" : \"app-sideManu-shrinked\"}>\n        <SideManu openManu={openManu} setOpenManu={setOpenManu} />\n      </div>\n      <div className=\"app-body-container\">\n        <CSVreader isOpen={openManu} />\n        <Navbar setOpenManu={setOpenManu} />\n        <div className=\"app-body-topInfo-container\">\n        </div>\n        <ChartContainer />\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","const initialState = {\n    csvData: [],\n    error: \"\"\n}\n\nconst csvReducer = (state = initialState, actions) => {\n    switch (actions.type) {\n        case 'STORE_CSV_DATA':\n            return {\n                ...state,\n                csvData: actions.payload\n            }\n        case 'CSV_DATA_FAILURE':\n            return {\n                ...state,\n                error: actions.error\n            }\n        default:\n            return state;\n    }\n}\n\nexport default csvReducer;","const initialState = {\n    roundGroupData: [],\n}\n\nconst chartReducer = (state = initialState, actions) => {\n    switch (actions.type) {\n        case 'LOAD_GROUP_CHART':\n            return {\n                ...state,\n                roundGroupData: actions.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default chartReducer;","import csvReducer from './csvReducer';\nimport chartReducer from './chartReducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n    csvData: csvReducer,\n    chartData: chartReducer\n})\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/rootReducer'\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}